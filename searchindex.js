Search.setIndex({"docnames": ["api/conditional", "api/list", "api/map", "api/sequence", "api/utilities", "generated/include/core/dir", "generated/include/core/pp/args.h", "generated/include/core/pp/base.h", "generated/include/core/pp/bool.h", "generated/include/core/pp/cat.h", "generated/include/core/pp/count.h", "generated/include/core/pp/defer.h", "generated/include/core/pp/dir", "generated/include/core/pp/eval.h", "generated/include/core/pp/ifelse.h", "generated/include/core/pp/list.h", "generated/include/core/pp/map.h", "generated/include/core/pp/pp.h", "generated/include/core/pp/product.h", "generated/include/core/pp/seq.h", "generated/include/core/pp/stringize.h", "generated/include/core/pp/unparen.h", "generated/include/dir", "generated/test/dir", "generated/test/src/core/dir", "generated/test/src/core/pp/dir", "generated/test/src/core/pp/test_pp_base.cpp", "generated/test/src/dir", "index"], "filenames": ["api/conditional.md", "api/list.md", "api/map.md", "api/sequence.md", "api/utilities.md", "generated/include/core/dir.rst", "generated/include/core/pp/args.h.rst", "generated/include/core/pp/base.h.rst", "generated/include/core/pp/bool.h.rst", "generated/include/core/pp/cat.h.rst", "generated/include/core/pp/count.h.rst", "generated/include/core/pp/defer.h.rst", "generated/include/core/pp/dir.rst", "generated/include/core/pp/eval.h.rst", "generated/include/core/pp/ifelse.h.rst", "generated/include/core/pp/list.h.rst", "generated/include/core/pp/map.h.rst", "generated/include/core/pp/pp.h.rst", "generated/include/core/pp/product.h.rst", "generated/include/core/pp/seq.h.rst", "generated/include/core/pp/stringize.h.rst", "generated/include/core/pp/unparen.h.rst", "generated/include/dir.rst", "generated/test/dir.rst", "generated/test/src/core/dir.rst", "generated/test/src/core/pp/dir.rst", "generated/test/src/core/pp/test_pp_base.cpp.rst", "generated/test/src/dir.rst", "index.md"], "titles": ["Conditionals", "Lists", "Map and Product", "Sequences", "Utilities", "core", "args.h", "base.h", "bool.h", "cat.h", "count.h", "defer.h", "pp", "eval.h", "ifelse.h", "list.h", "map.h", "pp.h", "product.h", "seq.h", "stringize.h", "unparen.h", "include", "test", "core", "pp", "test_pp_base.cpp", "src", "C++ Preprocessor Library"], "terms": {"core_pp_bool": [0, 6, 8, 14, 19, 26], "x": [0, 2, 4, 8, 13, 16, 21, 26], "expand": [0, 1, 2, 3, 4, 6, 7, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21], "1": [0, 1, 2, 3, 4, 6, 8, 10, 13, 16, 18, 19, 26], "given": [0, 1, 2, 3, 4, 8, 10, 13, 14, 16, 18, 19], "argument": [0, 1, 2, 3, 4, 6, 7, 8, 9, 11, 13, 14, 15, 16, 19, 20, 21], "i": [0, 1, 2, 3, 4, 6, 8, 14, 28], "fals": [0, 8, 14], "0": [0, 1, 3, 4, 6, 8, 10, 14, 19, 26], "otherwis": [0, 3, 4, 6, 8, 19], "123": [0, 8, 14], "core_pp_not": [0, 8, 19], "arguemnt": [0, 8], "core_pp_if": [0, 14, 26], "c": [0, 1, 2, 3, 9, 10, 14, 15, 16, 18, 19, 26], "either": [0, 14], "macro": [0, 1, 2, 3, 4, 6, 13, 14, 16, 21], "return": [0, 14, 26], "its": [0, 1, 4, 9, 11, 13, 14, 20, 21], "true": [0, 14], "noth": [0, 4, 7, 14], "when": [0, 14, 28], "invok": [0, 2, 4, 14, 16, 21], "two": [0, 1, 2, 4, 9, 11, 14, 18, 28], "pair": [0, 2, 4, 14, 16, 21], "parenthes": [0, 1, 3, 4, 14, 21], "thi": [0, 3, 4, 14, 21, 28], "act": [0, 14], "much": [0, 14], "like": [0, 14, 28], "tradit": [0, 14], "statement": [0, 14], "code_pp_if": [0, 14], "claus": [0, 14, 28], "core_pp_if_els": [0, 14, 16, 19, 26], "first": [0, 1, 2, 3, 9, 14, 15, 16, 19, 28], "second": [0, 1, 3, 14, 15, 19], "work": [0, 14], "els": [0, 14], "code_pp_if_els": [0, 14], "A": [1, 3, 4, 13], "zero": [1, 3, 4, 7], "more": [1, 3, 4, 7], "comma": [1, 3, 4, 7, 26], "separ": [1, 3], "item": [1, 3], "ar": [1, 2, 3, 19], "enclos": [1, 3, 4, 21], "which": [1, 2], "would": 1, "make": [1, 3, 28], "sequenc": [1, 2, 4, 9, 10, 16, 18, 19, 21, 28], "some": [1, 3, 28], "mai": [1, 3], "limit": [1, 3], "30": [1, 3], "core_pp_head": [1, 2, 6, 15, 16, 19, 26], "b": [1, 2, 3, 4, 6, 9, 10, 15, 16, 18, 19, 20, 21, 26], "core_pp_rest": [1, 15, 19, 26], "remain": [1, 2, 3, 9, 15, 16, 19], "core_pp_second": [1, 8, 15, 19, 26], "core_pp_third": [1, 15, 19, 26], "third": [1, 3, 15, 19], "core_pp_cat": [1, 8, 9, 14, 26], "concaten": [1, 9], "ab": [1, 9], "core_pp_catn": [1, 9, 21, 26], "row": [1, 9], "core_pp_count": [1, 10, 26], "number": [1, 3, 10], "element": [1, 2, 3, 10, 16, 19], "2": [1, 2, 3, 4, 10, 13, 16, 18, 26], "3": [1, 2, 3, 10, 16, 26, 28], "There": 2, "often": 2, "mulitpl": 2, "flavor": 2, "signifi": 2, "eval": [2, 12, 16, 17, 18, 26, 28], "seq": [2, 3, 10, 12, 16, 17, 26, 28], "compon": [2, 28], "name": [2, 16, 26], "indic": 2, "recurs": [2, 4, 13], "result": 2, "typic": 2, "desir": 2, "oper": 2, "oppos": 2, "list": [2, 3, 4, 8, 10, 12, 17, 19, 21, 26, 28], "core_pp_eval_map": [2, 16, 26], "m": [2, 16], "appli": [2, 16], "each": [2, 16], "defin": [2, 4, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21, 26, 28], "doubler": [2, 16], "core_pp_eval_map_seq": [2, 16, 26], "core_pp_eval_mapn": [2, 16, 26], "prepend": [2, 16], "turn": [2, 16], "int": [2, 16, 26, 28], "core_pp_eval_mapn_seq": [2, 16, 26], "remian": [2, 16], "core_pp_eval_map_infix": [2, 16, 26], "infix": [2, 16], "start": [2, 16], "interspers": [2, 16], "core_pp_map_infix": [2, 16], "core_pp_comma": [2, 4, 7, 16, 26], "core_pp_eval_map_infix_seq": [2, 16, 26], "core_pp_map_infix_seq": [2, 16], "second_seq": [2, 16], "core_pp_eval_map_with": [2, 16, 26], "data": [2, 16], "subsequ": [2, 16], "qualifi": [2, 16], "valu": [2, 16, 26], "qualiti": [2, 16], "foo": [2, 16, 26], "core_pp_eval_map_with_seq": [2, 16, 26, 28], "core_pp_eval_cartesian_product_seq": [2, 18, 26], "aseq": [2, 18], "bseq": [2, 18], "repres": [2, 18], "cartesian": [2, 18], "sinc": 3, "thei": 3, "can": [3, 28], "pass": [3, 4, 6, 7, 11, 13], "singl": [3, 4, 11, 13], "them": 3, "an": 3, "import": 3, "unit": 3, "encapsul": 3, "domain": 3, "core_pp_is_seq": [3, 19, 26], "core_pp_head_seq": [3, 19, 26], "core_pp_rest_seq": [3, 19, 26], "seeuenc": [3, 19], "core_pp_second_seq": [3, 19, 26], "core_pp_third_seq": [3, 19, 26], "core_pp_count_seq": [3, 10, 26], "d": [3, 10], "core_pp_head_list_or_seq": [3, 19, 26], "seq_or_valu": [3, 19], "core_pp_empti": [4, 7, 11, 26], "liter": [4, 7], "charact": [4, 7], "core_pp_lparen": [4, 7, 18, 26], "left": [4, 7, 13], "parenthesi": [4, 7], "core_pp_rparen": [4, 7, 18, 26], "right": [4, 7], "core_pp_pass": [4, 7], "core_pp_has_arg": [4, 6, 16, 26], "core_pp_string": [4, 20, 26], "core_pp_unparen": [4, 6, 16, 21, 26], "remov": [4, 21], "possibl": [4, 21], "produc": [4, 21, 28], "core_pp_ev": [4, 13, 16, 18, 26], "forc": [4, 13, 28], "preprocessor": [4, 13], "own": [4, 13], "devic": [4, 13], "do": [4, 13, 28], "substitut": [4, 11, 13], "recursivlei": [4, 13], "up": [4, 13, 28], "1024": [4, 13], "level": [4, 13], "empti": [4, 13, 26], "needs_two_pass": [4, 13], "core_pp_defer1": [4, 11], "id": [4, 11], "defer": [4, 12, 16, 17, 26, 28], "expans": [4, 11], "core_pp_defer2": [4, 11, 16, 18], "core_pp_defer3": [4, 11], "three": [4, 11], "core_pp_defer4": [4, 11], "four": [4, 11], "pp": [5, 6, 8, 11, 14, 16, 18, 19, 21, 24, 26, 28], "copyright": [6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "2017": [6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21], "2019": [6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "2022": [6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 18, 19, 20, 21], "mark": [6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "melton": [6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 26], "pragma": [6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21], "onc": [6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21], "includ": [6, 8, 11, 14, 16, 17, 18, 19, 21, 26, 28], "core": [6, 8, 11, 14, 16, 17, 18, 19, 21, 22, 26, 27, 28], "bool": [6, 12, 14, 17, 26, 28], "verbatim": [6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21], "emb": [6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21], "rst": [6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21], "lead": [6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21], "slash": [6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21], "code": [6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 28], "block": [6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21], "cpp": [6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21, 25, 28], "endverbatim": [6, 8, 9, 10, 13, 14, 15, 16, 18, 19, 20, 21], "_core_pp_has_arg": 6, "__va_args__": [6, 7, 8, 9, 10, 13, 14, 15, 16, 19, 20, 21], "_core_pp_end_of_arguments_": 6, "cat": [8, 12, 14, 17, 21, 26, 28], "core_pp_is_prob": 8, "core_pp_prob": 8, "_core_pp_not_": 8, "_core_pp_not_0": 8, "_core_pp_argn": 10, "_1": 10, "_2": 10, "_3": 10, "_4": 10, "_5": 10, "_6": 10, "_7": 10, "_8": 10, "_9": 10, "_10": 10, "_11": 10, "_12": 10, "_13": 10, "_14": 10, "_15": 10, "_16": 10, "_17": 10, "_18": 10, "_19": 10, "_20": 10, "_21": 10, "_22": 10, "_23": 10, "_24": 10, "_25": 10, "_26": 10, "_27": 10, "_28": 10, "_29": 10, "_30": 10, "n": [10, 26, 28], "ignor": 10, "29": 10, "28": 10, "27": 10, "26": 10, "25": 10, "24": 10, "23": 10, "22": 10, "21": 10, "20": [10, 28], "19": 10, "18": 10, "17": 10, "16": 10, "15": 10, "14": [10, 28], "13": 10, "12": [10, 26], "11": [10, 28], "10": 10, "9": [10, 26], "8": [10, 26], "7": [10, 26], "6": 10, "5": 10, "4": [10, 26], "base": [11, 12, 17, 28], "arg": [12, 16, 17, 28], "h": [12, 26, 28], "count": [12, 17, 26, 28], "ifels": [12, 16, 17, 28], "map": [12, 17, 18, 26, 28], "product": [12, 17, 28], "stringiz": [12, 17, 26, 28], "unparen": [12, 16, 17, 26, 28], "core_pp_eval1024": 13, "core_pp_eval512": 13, "core_pp_eval256": 13, "core_pp_eval128": 13, "core_pp_eval64": 13, "core_pp_eval32": 13, "core_pp_eval16": 13, "core_pp_eval8": 13, "core_pp_eval4": 13, "core_pp_eval2": 13, "core_pp_eval1": 13, "condit": [14, 28], "_core_pp_if": 14, "_core_pp_if_": 14, "_core_pp_if_0": 14, "_core_pp_if_1": 14, "_core_pp_if_els": 14, "_core_pp_if_else_": 14, "_core_pp_if_else_0": 14, "t": [14, 28], "f": 14, "_core_pp_if_else_1": 14, "core_pp_map": 16, "_core_pp_map": 16, "core_pp_map_seq": 16, "_core_pp_map_seq": 16, "core_pp_mapn": 16, "_core_pp_mapn": 16, "core_pp_mapn_seq": 16, "_core_pp_mapn_seq": 16, "_core_pp_map_infix": 16, "_core_pp_map_infix_seq": 16, "core_pp_map_with": 16, "_core_pp_map_with": 16, "core_pp_map_with_seq": [16, 18], "_core_pp_map_with_seq": 16, "_core_pp_cartesian_map": 18, "_core_pp_cartesian_product_item_seq": 18, "aitem": 18, "_core_pp_deferred_map_with_seq": 18, "core_pp_cartesian_product_seq": 18, "helper": 19, "is_seq": 19, "_core_pp_zero": 19, "_core_pp_is_zero": 19, "string": 20, "convert": 20, "core_pp_stringize1": 20, "_core_pp_nothing__core_pp_extract": 21, "_core_pp_extract": 21, "core_pp_evaluating_past": 21, "_core_pp_nothing_": 21, "src": [23, 28], "test_pp_bas": [25, 28], "gtest": 26, "test": [26, 28], "expect_eq": 26, "paren": 26, "core_pp_test_eval_inn": 26, "core_pp_test_eval_empti": 26, "core_pp_test_ev": 26, "undef": 26, "abc": 26, "def": 26, "IF": 26, "if_els": 26, "has_arg": 26, "core_pp_test_item": 26, "tensor": 26, "uint": 26, "tensor1n": 26, "tensor2n": 26, "tensor3n": 26, "map_seq": 26, "mapn": 26, "mapn_seq": 26, "map_infix": 26, "map_infix_seq": 26, "map_with": 26, "map_with_seq": 26, "cartesian_product": 26, "main": 26, "argc": 26, "char": 26, "argv": 26, "initgoogletest": 26, "run_all_test": 26, "primit": 28, "abus": 28, "us": 28, "structur": 28, "fashion": 28, "If": 28, "you": 28, "find": 28, "youself": 28, "gener": 28, "just": 28, "don": 28, "take": 28, "walk": 28, "wood": 28, "clear": 28, "head": 28, "re": 28, "evalu": 28, "problem": 28, "come": 28, "better": 28, "option": 28, "mayb": 28, "tool": 28, "design": 28, "task": 28, "hand": 28, "should": 28, "last": 28, "resort": 28, "But": 28, "those": 28, "time": 28, "lessor": 28, "evil": 28, "we": 28, "all": 28, "agre": 28, "For": 28, "exampl": 28, "class": 28, "templat": 28, "instati": 28, "sever": 28, "integr": 28, "type": 28, "gen_myclass": 28, "gen_myclass_seq": 28, "myclass": 28, "type_seq": 28, "int8": 28, "int16": 28, "int32": 28, "int64": 28, "follow": 28, "long": 28, "unsign": 28, "ye": 28, "know": 28, "onli": 28, "could": 28, "get": 28, "proprocessor": 28, "emit": 28, "newlin": 28, "said": 28, "go": 28, "unless": 28, "must": 28, "git": 28, "clone": 28, "http": 28, "github": 28, "com": 28, "mkdir": 28, "build": 28, "cd": 28, "cc": 28, "clang": 28, "mp": 28, "cxx": 28, "cmake": 28, "dcmake_install_prefix": 28, "home": 28, "opt": 28, "j4": 28, "check": 28, "run": 28, "To": 28, "document": 28, "requir": 28, "doxygen": 28, "sphinx": 28, "dcore_doc": 28, "cxx_core_pp_doc": 28, "root": 28, "html": 28, "tree": 28, "doc": 28, "index": 28, "part": 28, "famili": 28, "The": 28, "have": 28, "primari": 28, "goal": 28, "ergonom": 28, "In": 28, "spirit": 28, "cppcoreguidelin": 28, "aspir": 28, "facilit": 28, "write": 28, "concis": 28, "idiomat": 28, "provid": 28, "path": 28, "robust": 28, "easi": 28, "read": 28, "good": 28, "fun": 28, "modern": 28, "languag": 28, "platform": 28, "broad": 28, "support": 28, "while": 28, "ha": 28, "tradition": 28, "veri": 28, "minim": 28, "standard": 28, "rang": 28, "feel": 28, "softwar": 28, "under": 28, "bsd": 28, "see": 28, "detail": 28, "util": 28}, "objects": {"": [[0, 0, 1, "c.CORE_PP_BOOL", "CORE_PP_BOOL"], [1, 0, 1, "c.CORE_PP_CAT", "CORE_PP_CAT"], [1, 0, 1, "c.CORE_PP_CATN", "CORE_PP_CATN"], [4, 0, 1, "c.CORE_PP_COMMA", "CORE_PP_COMMA"], [1, 0, 1, "c.CORE_PP_COUNT", "CORE_PP_COUNT"], [3, 0, 1, "c.CORE_PP_COUNT_SEQ", "CORE_PP_COUNT_SEQ"], [4, 0, 1, "c.CORE_PP_DEFER1", "CORE_PP_DEFER1"], [4, 0, 1, "c.CORE_PP_DEFER2", "CORE_PP_DEFER2"], [4, 0, 1, "c.CORE_PP_DEFER3", "CORE_PP_DEFER3"], [4, 0, 1, "c.CORE_PP_DEFER4", "CORE_PP_DEFER4"], [4, 0, 1, "c.CORE_PP_EMPTY", "CORE_PP_EMPTY"], [4, 0, 1, "c.CORE_PP_EVAL", "CORE_PP_EVAL"], [2, 0, 1, "c.CORE_PP_EVAL_CARTESIAN_PRODUCT_SEQ", "CORE_PP_EVAL_CARTESIAN_PRODUCT_SEQ"], [2, 0, 1, "c.CORE_PP_EVAL_MAP", "CORE_PP_EVAL_MAP"], [2, 0, 1, "c.CORE_PP_EVAL_MAPN", "CORE_PP_EVAL_MAPN"], [2, 0, 1, "c.CORE_PP_EVAL_MAPN_SEQ", "CORE_PP_EVAL_MAPN_SEQ"], [2, 0, 1, "c.CORE_PP_EVAL_MAP_INFIX", "CORE_PP_EVAL_MAP_INFIX"], [2, 0, 1, "c.CORE_PP_EVAL_MAP_INFIX_SEQ", "CORE_PP_EVAL_MAP_INFIX_SEQ"], [2, 0, 1, "c.CORE_PP_EVAL_MAP_SEQ", "CORE_PP_EVAL_MAP_SEQ"], [2, 0, 1, "c.CORE_PP_EVAL_MAP_WITH", "CORE_PP_EVAL_MAP_WITH"], [2, 0, 1, "c.CORE_PP_EVAL_MAP_WITH_SEQ", "CORE_PP_EVAL_MAP_WITH_SEQ"], [4, 0, 1, "c.CORE_PP_HAS_ARGS", "CORE_PP_HAS_ARGS"], [1, 0, 1, "c.CORE_PP_HEAD", "CORE_PP_HEAD"], [3, 0, 1, "c.CORE_PP_HEAD_LIST_OR_SEQ", "CORE_PP_HEAD_LIST_OR_SEQ"], [3, 0, 1, "c.CORE_PP_HEAD_SEQ", "CORE_PP_HEAD_SEQ"], [0, 0, 1, "c.CORE_PP_IF", "CORE_PP_IF"], [0, 0, 1, "c.CORE_PP_IF_ELSE", "CORE_PP_IF_ELSE"], [3, 0, 1, "c.CORE_PP_IS_SEQ", "CORE_PP_IS_SEQ"], [4, 0, 1, "c.CORE_PP_LPAREN", "CORE_PP_LPAREN"], [0, 0, 1, "c.CORE_PP_NOT", "CORE_PP_NOT"], [4, 0, 1, "c.CORE_PP_PASS", "CORE_PP_PASS"], [1, 0, 1, "c.CORE_PP_REST", "CORE_PP_REST"], [3, 0, 1, "c.CORE_PP_REST_SEQ", "CORE_PP_REST_SEQ"], [4, 0, 1, "c.CORE_PP_RPAREN", "CORE_PP_RPAREN"], [1, 0, 1, "c.CORE_PP_SECOND", "CORE_PP_SECOND"], [3, 0, 1, "c.CORE_PP_SECOND_SEQ", "CORE_PP_SECOND_SEQ"], [4, 0, 1, "c.CORE_PP_STRINGIZE", "CORE_PP_STRINGIZE"], [1, 0, 1, "c.CORE_PP_THIRD", "CORE_PP_THIRD"], [3, 0, 1, "c.CORE_PP_THIRD_SEQ", "CORE_PP_THIRD_SEQ"], [4, 0, 1, "c.CORE_PP_UNPAREN", "CORE_PP_UNPAREN"]]}, "objtypes": {"0": "c:macro"}, "objnames": {"0": ["c", "macro", "C macro"]}, "titleterms": {"condit": 0, "list": [1, 15], "map": [2, 16], "product": [2, 18], "sequenc": 3, "util": 4, "core": [5, 24], "arg": 6, "h": [6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21], "base": 7, "bool": 8, "cat": 9, "count": 10, "defer": 11, "pp": [12, 17, 25], "eval": 13, "ifels": 14, "seq": 19, "stringiz": 20, "unparen": 21, "includ": 22, "test": 23, "test_pp_bas": 26, "cpp": 26, "src": 27, "c": 28, "preprocessor": 28, "librari": 28, "brief": 28, "tour": 28, "instal": 28, "background": 28, "licens": 28, "appendix": 28, "api": 28, "refer": 28, "file": 28}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"Conditionals": [[0, "conditionals"]], "Lists": [[1, "lists"]], "Map and Product": [[2, "map-and-product"]], "Map": [[2, "map"]], "Product": [[2, "product"]], "Sequences": [[3, "sequences"]], "Utilities": [[4, "utilities"]], "core": [[5, "core"], [24, "core"]], "args.h": [[6, "args-h"]], "base.h": [[7, "base-h"]], "bool.h": [[8, "bool-h"]], "cat.h": [[9, "cat-h"]], "count.h": [[10, "count-h"]], "defer.h": [[11, "defer-h"]], "pp": [[12, "pp"], [25, "pp"]], "eval.h": [[13, "eval-h"]], "ifelse.h": [[14, "ifelse-h"]], "list.h": [[15, "list-h"]], "map.h": [[16, "map-h"]], "pp.h": [[17, "pp-h"]], "product.h": [[18, "product-h"]], "seq.h": [[19, "seq-h"]], "stringize.h": [[20, "stringize-h"]], "unparen.h": [[21, "unparen-h"]], "include": [[22, "include"]], "test": [[23, "test"]], "test_pp_base.cpp": [[26, "test-pp-base-cpp"]], "src": [[27, "src"]], "C++ Preprocessor Library": [[28, "c-preprocessor-library"]], "Brief Tour": [[28, "brief-tour"]], "Installation": [[28, "installation"]], "Background": [[28, "background"]], "License": [[28, "license"]], "Appendix": [[28, "appendix"]], "API REFERENCE": [[28, null]], "FILE REFERENCE": [[28, null]]}, "indexentries": {"core_pp_bool (c macro)": [[0, "c.CORE_PP_BOOL"]], "core_pp_if (c macro)": [[0, "c.CORE_PP_IF"]], "core_pp_if_else (c macro)": [[0, "c.CORE_PP_IF_ELSE"]], "core_pp_not (c macro)": [[0, "c.CORE_PP_NOT"]], "core_pp_cat (c macro)": [[1, "c.CORE_PP_CAT"]], "core_pp_catn (c macro)": [[1, "c.CORE_PP_CATN"]], "core_pp_count (c macro)": [[1, "c.CORE_PP_COUNT"]], "core_pp_head (c macro)": [[1, "c.CORE_PP_HEAD"]], "core_pp_rest (c macro)": [[1, "c.CORE_PP_REST"]], "core_pp_second (c macro)": [[1, "c.CORE_PP_SECOND"]], "core_pp_third (c macro)": [[1, "c.CORE_PP_THIRD"]], "core_pp_eval_cartesian_product_seq (c macro)": [[2, "c.CORE_PP_EVAL_CARTESIAN_PRODUCT_SEQ"]], "core_pp_eval_map (c macro)": [[2, "c.CORE_PP_EVAL_MAP"]], "core_pp_eval_mapn (c macro)": [[2, "c.CORE_PP_EVAL_MAPN"]], "core_pp_eval_mapn_seq (c macro)": [[2, "c.CORE_PP_EVAL_MAPN_SEQ"]], "core_pp_eval_map_infix (c macro)": [[2, "c.CORE_PP_EVAL_MAP_INFIX"]], "core_pp_eval_map_infix_seq (c macro)": [[2, "c.CORE_PP_EVAL_MAP_INFIX_SEQ"]], "core_pp_eval_map_seq (c macro)": [[2, "c.CORE_PP_EVAL_MAP_SEQ"]], "core_pp_eval_map_with (c macro)": [[2, "c.CORE_PP_EVAL_MAP_WITH"]], "core_pp_eval_map_with_seq (c macro)": [[2, "c.CORE_PP_EVAL_MAP_WITH_SEQ"]], "core_pp_count_seq (c macro)": [[3, "c.CORE_PP_COUNT_SEQ"]], "core_pp_head_list_or_seq (c macro)": [[3, "c.CORE_PP_HEAD_LIST_OR_SEQ"]], "core_pp_head_seq (c macro)": [[3, "c.CORE_PP_HEAD_SEQ"]], "core_pp_is_seq (c macro)": [[3, "c.CORE_PP_IS_SEQ"]], "core_pp_rest_seq (c macro)": [[3, "c.CORE_PP_REST_SEQ"]], "core_pp_second_seq (c macro)": [[3, "c.CORE_PP_SECOND_SEQ"]], "core_pp_third_seq (c macro)": [[3, "c.CORE_PP_THIRD_SEQ"]], "core_pp_comma (c macro)": [[4, "c.CORE_PP_COMMA"]], "core_pp_defer1 (c macro)": [[4, "c.CORE_PP_DEFER1"]], "core_pp_defer2 (c macro)": [[4, "c.CORE_PP_DEFER2"]], "core_pp_defer3 (c macro)": [[4, "c.CORE_PP_DEFER3"]], "core_pp_defer4 (c macro)": [[4, "c.CORE_PP_DEFER4"]], "core_pp_empty (c macro)": [[4, "c.CORE_PP_EMPTY"]], "core_pp_eval (c macro)": [[4, "c.CORE_PP_EVAL"]], "core_pp_has_args (c macro)": [[4, "c.CORE_PP_HAS_ARGS"]], "core_pp_lparen (c macro)": [[4, "c.CORE_PP_LPAREN"]], "core_pp_pass (c macro)": [[4, "c.CORE_PP_PASS"]], "core_pp_rparen (c macro)": [[4, "c.CORE_PP_RPAREN"]], "core_pp_stringize (c macro)": [[4, "c.CORE_PP_STRINGIZE"]], "core_pp_unparen (c macro)": [[4, "c.CORE_PP_UNPAREN"]]}})